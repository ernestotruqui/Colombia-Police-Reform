# clean_shp_old <- function(df_shp){
#  df_shp <- df_shp[,'COD_DANE_A']
#  colnames(df_shp)[which(names(df_shp) == "COD_DANE_A")] <- 'region'
#  return(df_shp)
#}
p2p <- function(df_crime, df_shp){
pnts <- data.frame('x' = unlist(map(df_crime$geometry, 1)),
'y' = unlist(map(df_crime$geometry, 2)))
# create a points collection
pnts_sf <- do.call("st_sfc", c(lapply(1:nrow(pnts),
function(i) {st_point(as.numeric(pnts[i, ]))}), list("crs" = 4326)))
# apply transformation to pnts sf
pnts_trans <- st_transform(pnts_sf, 2163)
tt1_trans <- st_transform(df_shp, 2163)
pnts$region <- apply(st_intersects(tt1_trans, pnts_trans, sparse = FALSE), 2,
function(col) {
tt1_trans[which(col), ]$region
})
df_crime$region <- as.character(pnts$region)
return(df_crime)
}
### run ####
# Get block level data
# df_shp_old <- clean_shp_old(st_read(file.path(PATH, 'manzanas_MEVAL.shp')))
# df_crime19_old <- p2p(df_crime19, df_shp_old)
# df_crime19_old$region <- as.numeric(df_crime19_old$region)
# df_crim19_old <- na.omit(df_crime19_old)
df_shp <- clean_shp(st_read(file.path(PATH, '07_Cuadrantes')))
ghana <- readOGR("GHA_adm", "GHA_adm1")
gTouches(df_shp, byid=TRUE)
df_shp_sp <- as(df_shp,Class = "Spatial")
gTouches(df_shp_sp, byid=TRUE)
matrix_shp <- gTouches(df_shp_sp, byid=TRUE)
View(matrix_shp)
matrix_shp <- as.numeric(matrix_shp)
matrix_shp <- gTouches(df_shp_sp, byid=TRUE)
df_shp_sp <- as(df_shp,Class = "Spatial")
matrix_shp <- 1 * gTouches(df_shp_sp, byid=TRUE)
View(matrix_shp)
df_shp_ap
df_shp_sp
?gTouches
df_shp_sp$OBJECTID
df_shp_sp$region
View(matrix_shp)
head(df_shp_sp,10)
df_shp_sp$region[1]
df_shp_sp$OBJECTID[1]
colnames(matrix_shp)
rownames(matrix_shp)
colnames(matrix_shp) <- df_shp_sp$region
rownames(matrix_shp) <- df_shp_sp$region
shp2mat <- function(df_shp){
df_shp_sp <- as(df_shp,Class = "Spatial")
matrix_shp <- 1*gTouches(df_shp_sp, byid=TRUE)
colnames(matrix_shp) <- df_shp_sp$region
rownames(matrix_shp) <- df_shp_sp$region
return(matrix_shp)
}
shp2mtx <- function(df_shp){
df_shp_sp <- as(df_shp,Class = "Spatial")
matrix_shp <- 1*gTouches(df_shp_sp, byid=TRUE)
colnames(matrix_shp) <- df_shp_sp$region
rownames(matrix_shp) <- df_shp_sp$region
return(matrix_shp)
}
mtx_shp <- shp2mtx(df_shp)
PATH <- "E://Files/HaHaHariss/22Winter/Policy Lab/Data"
library(rgeos)
library(igraph)
library(ggplot2)
library(tidyverse)
library(sf)
# Set Environment####
## set path and options####
options(scipen = 999)
PATH <- "E://Files/HaHaHariss/22Winter/Policy Lab/Data"
#PATH <- "C:/Users/52322/OneDrive - The University of Chicago/Documents/Harris/2022 Winter/Policy Lab/Data/Data"
## load libraries####
library(readxl)
library(sf)
library(ggplot2)
#install.packages("reshape2")
library(reshape2)
library(plyr)
library(dplyr)
library(lubridate)
library(tidyverse)
#install.packages("leaflet")
library(leaflet)
library(ggeasy)
# Data Cleaning ####
## Pre-processing Crime Data ####
clean_crime_data <- function(df_crime){
df_crime$lat <- str_replace(df_crime$lat, ',' , '.')
df_crime$lon <- str_replace(df_crime$lon, ',' , '.')
return(df_crime)
}
read_crime_data <- function(fname, sname, path = PATH){
df <- read_xlsx(file.path(PATH, fname), sheet = sname)
df <- clean_crime_data(df) %>%
mutate(crime_type = sname) %>%
st_as_sf(coords = c("lon", "lat"), crs = 4326) %>%
select(c(crime_type, fecha, hora_24, geometry))
}
merge_crime_data <- function(fname, path = PATH){
names <- excel_sheets(file.path(path, fname))[c(2,3,4)]
df <- data.frame(matrix(nrow = 0, ncol = 4))
colnames(df) <- c('crime_type', 'fecha', 'hora_24', 'geometry')
for (name in names) {
df_temp <- read_crime_data(fname, name)
df <- rbind(df, df_temp)
}
# rename crime types
df$crime_type <- case_when(df$crime_type == "Homicidios" ~ "homicide",
df$crime_type == "H.Automotores" ~ "car theft",
df$crime_type == "H.Personas" ~ "robbery")
# turn time into shifts
df$shift <- ifelse(df$hora_24 %in% c(5,6,7,8,9,10,11,12),'5-13',
ifelse(df$hora_24 %in% c(13,14,15,16,17,18,19,20),
'13-21','21-5'))
#rename columns into English
df <- df %>%
dplyr::rename(date = fecha,
hour = hora_24)
#get years
df <- df %>%
mutate(year = year(date),
month = month(date))
return(df)
}
df_crime_yrs <- merge_crime_data('Crimes_MDE_V3.xlsx')
# create subsets of crime df by year ----
df_crime_18 <- df_crime_yrs %>%
filter(year == 2018)
df_crime_19 <- df_crime_yrs %>%
filter(year == 2019)
df_crime_20 <- df_crime_yrs %>%
filter(year == 2020)
df_crime_21 <- df_crime_yrs %>%
filter(year == 2021)
df_crime_22 <- df_crime_yrs %>%
filter(year == 2022)
## Pre-processing Shapefile ####
clean_shp <- function(df_shp){
df_shp <- df_shp[!substr(as.character(df_shp$NRO_CUADRA), 13, 13) %in% c('6', '7'),]
df_shp <- df_shp[is.na(df_shp$SUBESTACIO),]
df_shp <- df_shp[which(df_shp$ESTACION!='SAN ANTONIO DE PRADO'),]
df_shp <- df_shp[-which(df_shp$NRO_CUADRA %in% c('MEVALMNVCCD03E03C03000008',
'MEVALMNVCCD04E02C03000028')),]
# df_shp <- df_shp[which(df_shp$CAI!='CAI LAS PALMAS'),]
colnames(df_shp)[which(names(df_shp) == "NRO_CUADRA")] <- 'region'
return(df_shp)
}
p2p <- function(df_crime, df_shp){
pnts <- data.frame('x' = unlist(map(df_crime$geometry, 1)),
'y' = unlist(map(df_crime$geometry, 2)))
# create a points collection
pnts_sf <- do.call("st_sfc", c(lapply(1:nrow(pnts),
function(i) {st_point(as.numeric(pnts[i, ]))}), list("crs" = 4326)))
# apply transformation to pnts sf
pnts_trans <- st_transform(pnts_sf, 2163)
tt1_trans <- st_transform(df_shp, 2163)
pnts$region <- apply(st_intersects(tt1_trans, pnts_trans, sparse = FALSE), 2,
function(col) {
tt1_trans[which(col), ]$region
})
df_crime$region <- as.character(pnts$region)
return(df_crime)
}
df_shp_raw <- st_read(file.path(PATH, '07_Cuadrantes'))
df_shp_stations <- df_shp_raw %>%
st_drop_geometry() %>%
select(NRO_CUADRA, ESTACION)
df_geoms <- df_shp %>%
select(region, geometry)
df_shp <- clean_shp(st_read(file.path(PATH, '07_Cuadrantes')))
df_crime_18 <- p2p(df_crime_18, df_shp)
df_crime_19 <- p2p(df_crime_19, df_shp)
df_crime_20 <- p2p(df_crime_20, df_shp)
df_crime_21 <- p2p(df_crime_21, df_shp)
change_to_shift <- function(df_crime, shp = df_shp){
df_quad <- data.frame(region = rep(df_shp$region, 3),
shift = rep(c("21-5", "5-13", "13-21"), each = nrow(df_shp)))
df_temp <- df_crime %>%
group_by(region, shift) %>%
dplyr::summarise(homicide = sum(crime_type == 'homicide'),
theft = sum(crime_type == 'robbery'),
vehicle_theft= sum(crime_type == 'car theft'),
sum = n())
df_quad <- merge(df_quad, df_temp, by = c('region','shift'), all.x = T)
df_quad[is.na(df_quad)] <- 0
df_quad <- df_quad[,-7]
df_quad <- merge(df_quad, shp[, c(2, 13)], all = T)
df_quad <- df_quad %>%
left_join(df_shp_stations, by = c("region" = "NRO_CUADRA"))
df_quad <- st_as_sf(df_quad)
return(df_quad)
}
### create dfs for yearly crime per quad_shift -----
df_shift_18 <- change_to_shift(df_crime_18)
df_shift_19 <- change_to_shift(df_crime_19)
df_shift_20 <- change_to_shift(df_crime_20)
df_shift_21 <- change_to_shift(df_crime_21)
df_shifts <- rbind(df_shift_18, df_shift_19, df_shift_20, df_shift_21)
df_shifts_avg <- df_shifts %>%
st_drop_geometry() %>%
group_by(region, ESTACION, shift) %>%
dplyr::summarise(homicide = mean(homicide),
theft = mean(theft),
vehicle_theft = mean(vehicle_theft),
sum = mean(sum)) %>%
left_join(df_geoms, by = "region") %>%
st_as_sf()
# Redistribution optimal formula --------
redistribute <- function(df, colname){
df$temp <- (nrow(df) * st_drop_geometry(df)[,colname] / sum(st_drop_geometry(df)[,colname])) + 1
df$temp <- round(df$temp)
return(df$temp)
}
# crimes per police calculation
crime_per_police <- function(df, crime_type, n_of_police = ''){
df <- st_drop_geometry(df)
if (n_of_police == '') {
df$temp <- df[,crime_type] / 2
}
else {
df$temp <- df[,crime_type] / df[,n_of_police]
}
return(df$temp)
}
### run ####
# number of police in the quad shift
df_shifts_avg$n_of_police <- 2
df_shifts_avg$rn_of_police <- as.numeric(unlist(redistribute(df_shifts_avg, "sum")))
# number of crimes per police
df_shifts_avg$cpp <- as.numeric(unlist(crime_per_police(df_shifts_avg, 'sum')))
df_shifts_avg$rcpp <- as.numeric(unlist(crime_per_police(df_shifts_avg, 'sum', 'rn_of_police')))
df_shifts_avg <- df_shifts_avg %>%
dplyr::rename(station = ESTACION)
df_shp_raw <- st_read(file.path(PATH, '07_Cuadrantes'))
df_shp_stations <- df_shp_raw %>%
st_drop_geometry() %>%
select(NRO_CUADRA, ESTACION)
df_geoms <- df_shp %>%
select(region, geometry)
df_shifts_avg <- df_shifts %>%
st_drop_geometry() %>%
group_by(region, ESTACION, shift) %>%
dplyr::summarise(homicide = mean(homicide),
theft = mean(theft),
vehicle_theft = mean(vehicle_theft),
sum = mean(sum)) %>%
left_join(df_geoms, by = "region") %>%
st_as_sf()
df_shifts_avg$n_of_police <- 2
df_shifts_avg$rn_of_police <- as.numeric(unlist(redistribute(df_shifts_avg, "sum")))
# number of crimes per police
df_shifts_avg$cpp <- as.numeric(unlist(crime_per_police(df_shifts_avg, 'sum')))
df_shifts_avg$rcpp <- as.numeric(unlist(crime_per_police(df_shifts_avg, 'sum', 'rn_of_police')))
df_shifts_avg <- df_shifts_avg %>%
dplyr::rename(station = ESTACION)
#save dfs
st_write(df_shifts_avg, file.path(PATH, 'df_shifts_avg.shp'), append = F, delete_layer = T)
library(rgeos)
library(igraph)
library(ggplot2)
library(tidyverse)
library(sf)
PATH <- "E://Files/HaHaHariss/22Winter/Policy Lab/Data"
library(rgeos)
library(igraph)
library(ggplot2)
library(tidyverse)
library(sf)
PATH <- "E://Files/HaHaHariss/22Winter/Policy Lab/Data"
#PATH <- "C:/Users/52322/OneDrive - The University of Chicago/Documents/Harris/2022 Winter/Policy Lab/Data/Data"
df_shifts_avg <- st_read(file.path(PATH, "df_shifts_avg.shp"))
morning <- df_shifts_avg %>%
filter(shift == "5-13") %>%
select("region", "station", "sum", "geometry")
afternoon <- df_shifts_avg %>%
filter(shift == "13-21") %>%
select("region", "station", "sum", "geometry")
night <- df_shifts_avg %>%
filter(shift == "21-5") %>%
select("region", "station", "sum", "geometry")
shp2mtx <- function(df_shp){
df_shp_sp <- as(df_shp, Class = "Spatial")
matrix_shp <- 1*gTouches(df_shp_sp, byid = TRUE)
for (i in 1:nrow(matrix_shp)) {
for (j in 1:ncol(matrix_shp)) {
if (i > j) {
matrix_shp[i, j] <- 0
}
}
}
colnames(matrix_shp) <- df_shp_sp$region
rownames(matrix_shp) <- df_shp_sp$region
return(matrix_shp)
}
mtx2df_pairs <- function(mtx_shp){
df_pairs <- as_data_frame(graph_from_adjacency_matrix(mtx_shp))
return(df_pairs)
}
# function to filter only contiguous quads belonging to same station
get_stations <- function(df_pairs = pairs, df_stations = morning){
df_shifts_stations <- df_stations %>%
st_drop_geometry() %>%
select(region, station)
morn_pairs_test <- left_join(df_pairs, df_shifts_stations, by = c("from" = "region")) %>%
rename(station_from = station)
morn_pairs_test <- left_join(morn_pairs_test, df_shifts_stations, by = c("to" = "region")) %>%
rename(station_to = station)
morn_pairs_test <- morn_pairs_test %>%
filter(station_from == station_to)
}
# only quads within same station
df_pairs_stations <- get_stations()
get_crime_sum <- function(df_pairs_stations = df_pairs_stations, df_timeofday, shift){
df_quads_sums <- df_timeofday %>%
st_drop_geometry() %>%
select(region, sum)
df_temp <- left_join(df_pairs_stations, df_quads_sums, by = c("from" = "region")) %>%
rename(sum_from = sum)
df_temp <- left_join(df_temp, df_quads_sums, by = c("to" = "region")) %>%
rename(sum_to = sum)
df_temp <- df_temp %>%
mutate(sum_crimes = sum_from + sum_to,
shift = shift) %>%
select(c(-sum_from, - sum_to)) %>%
arrange(sum_crimes)
df_temp <- df_temp %>%
group_by(from) %>%
filter(sum_crimes == min(sum_crimes),
!duplicated(from)) %>%
ungroup() %>%
group_by(to) %>%
filter(sum_crimes == min(sum_crimes),
!duplicated(to)) %>%
ungroup()
}
morning_pairs <- get_crime_sum(df_pairs_stations = df_pairs_stations, df_timeofday = morning, shift = "5-13")
library(rgeos)
library(igraph)
library(ggplot2)
library(tidyverse)
library(sf)
PATH <- "E://Files/HaHaHariss/22Winter/Policy Lab/Data"
#PATH <- "C:/Users/52322/OneDrive - The University of Chicago/Documents/Harris/2022 Winter/Policy Lab/Data/Data"
df_shifts_avg <- st_read(file.path(PATH, "df_shifts_avg.shp"))
morning <- df_shifts_avg %>%
filter(shift == "5-13") %>%
select("region", "station", "sum", "geometry")
afternoon <- df_shifts_avg %>%
filter(shift == "13-21") %>%
select("region", "station", "sum", "geometry")
night <- df_shifts_avg %>%
filter(shift == "21-5") %>%
select("region", "station", "sum", "geometry")
shp2mtx <- function(df_shp){
df_shp_sp <- as(df_shp, Class = "Spatial")
matrix_shp <- 1*gTouches(df_shp_sp, byid = TRUE)
for (i in 1:nrow(matrix_shp)) {
for (j in 1:ncol(matrix_shp)) {
if (i > j) {
matrix_shp[i, j] <- 0
}
}
}
colnames(matrix_shp) <- df_shp_sp$region
rownames(matrix_shp) <- df_shp_sp$region
return(matrix_shp)
}
mtx2df_pairs <- function(mtx_shp){
df_pairs <- as_data_frame(graph_from_adjacency_matrix(mtx_shp))
return(df_pairs)
}
# matrix of all contiguous pairs
mtx_morn <- shp2mtx(morning)
# df of all contiguous pairs
pairs <- mtx2df_pairs(mtx_morn)
# function to filter only contiguous quads belonging to same station
get_stations <- function(df_pairs = pairs, df_stations = morning){
df_shifts_stations <- df_stations %>%
st_drop_geometry() %>%
select(region, station)
morn_pairs_test <- left_join(df_pairs, df_shifts_stations, by = c("from" = "region")) %>%
rename(station_from = station)
morn_pairs_test <- left_join(morn_pairs_test, df_shifts_stations, by = c("to" = "region")) %>%
rename(station_to = station)
morn_pairs_test <- morn_pairs_test %>%
filter(station_from == station_to)
}
# only quads within same station
df_pairs_stations <- get_stations()
# df of all contiguous pairs
pairs <- mtx2df_pairs(mtx_morn)
library(rgeos)
library(igraph)
library(ggplot2)
library(tidyverse)
library(sf)
PATH <- "E://Files/HaHaHariss/22Winter/Policy Lab/Data"
#PATH <- "C:/Users/52322/OneDrive - The University of Chicago/Documents/Harris/2022 Winter/Policy Lab/Data/Data"
df_shifts_avg <- st_read(file.path(PATH, "df_shifts_avg.shp"))
morning <- df_shifts_avg %>%
filter(shift == "5-13") %>%
select("region", "station", "sum", "geometry")
afternoon <- df_shifts_avg %>%
filter(shift == "13-21") %>%
select("region", "station", "sum", "geometry")
night <- df_shifts_avg %>%
filter(shift == "21-5") %>%
select("region", "station", "sum", "geometry")
shp2mtx <- function(df_shp){
df_shp_sp <- as(df_shp, Class = "Spatial")
matrix_shp <- 1*gTouches(df_shp_sp, byid = TRUE)
for (i in 1:nrow(matrix_shp)) {
for (j in 1:ncol(matrix_shp)) {
if (i > j) {
matrix_shp[i, j] <- 0
}
}
}
colnames(matrix_shp) <- df_shp_sp$region
rownames(matrix_shp) <- df_shp_sp$region
return(matrix_shp)
}
mtx2df_pairs <- function(mtx_shp){
df_pairs <- as_data_frame(graph_from_adjacency_matrix(mtx_shp))
return(df_pairs)
}
# matrix of all contiguous pairs
mtx_morn <- shp2mtx(morning)
# df of all contiguous pairs
pairs <- mtx2df_pairs(mtx_morn)
graph_from_adjacency_matrix(mtx_morning)
graph_from_adjacency_matrix(mtx_morn)
as_data_frame(graph_from_adjacency_matrix(mtx_morn))
as_data_frame(graph_from_adjacency_matrix(get.edgelist(mtx_morn))
)
get.edgelist(mtx_morn)
class(mtx_morn)
as_data_frame(get.edgelist(graph_from_adjacency_matrix(mtx_morn)))
mtx2df_pairs <- function(mtx_shp){
as_data_frame(get.edgelist(graph_from_adjacency_matrix(mtx_shp)))
return(df_pairs)
}
# matrix of all contiguous pairs
mtx_morn <- shp2mtx(morning)
# df of all contiguous pairs
pairs <- mtx2df_pairs(mtx_morn)
mtx2df_pairs <- function(mtx_shp){
as_data_frame(get.edgelist(graph_from_adjacency_matrix(mtx_shp)))
return(df_pairs)
}
# df of all contiguous pairs
pairs <- mtx2df_pairs(mtx_morn)
# matrix of all contiguous pairs
mtx_morn <- shp2mtx(morning)
# df of all contiguous pairs
pairs <- mtx2df_pairs(mtx_morn)
mtx2df_pairs <- function(mtx_shp){
df_pairs <- as_data_frame(get.edgelist(graph_from_adjacency_matrix(mtx_shp)))
return(df_pairs)
}
# matrix of all contiguous pairs
mtx_morn <- shp2mtx(morning)
# df of all contiguous pairs
pairs <- mtx2df_pairs(mtx_morn)
# function to filter only contiguous quads belonging to same station
get_stations <- function(df_pairs = pairs, df_stations = morning){
df_shifts_stations <- df_stations %>%
st_drop_geometry() %>%
select(region, station)
morn_pairs_test <- left_join(df_pairs, df_shifts_stations, by = c("from" = "region")) %>%
rename(station_from = station)
morn_pairs_test <- left_join(morn_pairs_test, df_shifts_stations, by = c("to" = "region")) %>%
rename(station_to = station)
morn_pairs_test <- morn_pairs_test %>%
filter(station_from == station_to)
}
# only quads within same station
df_pairs_stations <- get_stations()
View(morning)
# Required packages
libs <- c("rgdal", "maptools", "gridExtra")
lapply(libs, require, character.only = TRUE)
# Import Oregon census data
oregon <- readOGR(dsn = "path/to/data", layer = "orcounty")
oregon.coords <- coordinates(oregon)
library(maptools)
nc1 <- readShapePoly(system.file("shapes/sids.shp",
package="maptools")[1], proj4string=CRS("+proj=longlat +datum=NAD27"))
lps <- coordinates(nc1)
ID <- cut(lps[,1], quantile(lps[,1]), include.lowest=TRUE)
reg4 <- unionSpatialPolygons(nc1, ID)
row.names(reg4)
df <- as(nc1, "data.frame")
sapply(df, class)
dfa <- aggregate(df[,9:14], list(ID), sum)
sapply(df[,9:14], sum)
sapply(dfa[,2:7], sum)
row.names(dfa) <- as.character(dfa$Group.1)
nc2 <- SpatialPolygonsDataFrame(reg4, dfa)
View(nc1)
plot(nc1)
plot(nc2)
st_as_sf(nc1)
df_nc1<-st_as_sf(nc1)
View(df_nc1)
